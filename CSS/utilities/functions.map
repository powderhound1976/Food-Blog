{
	"version": 3,
	"file": "functions.css",
	"sources": [
		"../../bulma-0.8.0/sass/utilities/functions.sass"
	],
	"sourcesContent": [
		"@function mergeColorMaps($bulma-colors, $custom-colors) {\n  // We return at least Bulma's hard-coded colors\n  $merged-colors: $bulma-colors;\n\n  // We want a map as input\n  @if type-of($custom-colors) == 'map' {\n    @each $name, $components in $custom-colors {\n      // The color name should be a string\n      // and the components either a single color\n      // or a colors list with at least one element\n      @if type-of($name) == 'string' and (type-of($components) == 'list' or type-of($components) == 'color') and length($components) >= 1 {\n        $color-base: null;\n        $color-invert: null;\n        $color-light: null;\n        $color-dark: null;\n        $value: null;\n\n        // The param can either be a single color\n        // or a list of 2 colors\n        @if type-of($components) == 'color' {\n          $color-base: $components;\n          $color-invert: findColorInvert($color-base);\n          $color-light: findLightColor($color-base);\n          $color-dark: findDarkColor($color-base); }\n        @else if type-of($components) == 'list' {\n          $color-base: nth($components, 1);\n          // If Invert, Light and Dark are provided\n          @if length($components) > 3 {\n            $color-invert: nth($components, 2);\n            $color-light: nth($components, 3);\n            $color-dark: nth($components, 4);\n }            // If only Invert and Light are provided\n          @else if length($components) > 2 {\n            $color-invert: nth($components, 2);\n            $color-light: nth($components, 3);\n            $color-dark: findDarkColor($color-base);\n }            // If only Invert is provided\n          @else {\n            $color-invert: nth($components, 2);\n            $color-light: findLightColor($color-base);\n            $color-dark: findDarkColor($color-base); } }\n\n        $value: ($color-base, $color-invert, $color-light, $color-dark);\n\n        // We only want to merge the map if the color base is an actual color\n        @if type-of($color-base) == 'color' {\n          // We merge this colors elements as map with Bulma's colors map\n          // (we can override them this way, no multiple definition for the same name)\n          // $merged-colors: map_merge($merged-colors, ($name: ($color-base, $color-invert, $color-light, $color-dark)))\n          $merged-colors: map_merge($merged-colors, ($name: $value)); } } } }\n\n  @return $merged-colors; }\n\n@function powerNumber($number, $exp) {\n  $value: 1;\n  @if $exp > 0 {\n    @for $i from 1 through $exp {\n      $value: $value * $number; } }\n  @else if $exp < 0 {\n    @for $i from 1 through -$exp {\n      $value: $value / $number; } }\n  @return $value; }\n\n@function colorLuminance($color) {\n  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));\n  @each $name, $value in $color-rgb {\n    $adjusted: 0;\n    $value: $value / 255;\n    @if $value < 0.03928 {\n      $value: $value / 12.92; }\n    @else {\n      $value: ($value + .055) / 1.055;\n      $value: powerNumber($value, 2); }\n    $color-rgb: map-merge($color-rgb, ($name: $value)); }\n  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722); }\n\n@function findColorInvert($color) {\n  @if (colorLuminance($color) > 0.55) {\n    @return rgba(#000, 0.7); }\n  @else {\n    @return #fff; } }\n\n@function findLightColor($color) {\n  @if type-of($color) == 'color' {\n    $l: 96%;\n    @if lightness($color) > 96% {\n      $l: lightness($color); }\n    @return change-color($color, $lightness: $l); }\n  @return $background; }\n\n@function findDarkColor($color) {\n  @if type-of($color) == 'color' {\n    $base-l: 29%;\n    $luminance: colorLuminance($color);\n    $luminance-delta: (0.53 - $luminance);\n    $target-l: round($base-l + ($luminance-delta * 53));\n    @return change-color($color, $lightness: max($base-l, $target-l)); }\n  @return $text-strong; }\n"
	],
	"names": [],
	"mappings": ""
}